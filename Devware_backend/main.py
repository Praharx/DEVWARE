import asyncio
from typing import Union
from fastapi import FastAPI
from prisma import Prisma
from prisma.models import User
from langchain_community.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

knowledge_base = ''
ghdata = ''
onboard = ''

async def main() -> None:
    print('Start of the function')
    db = Prisma()
    await db.connect()

    knowledge_base = await db.knowledgebase.find_first(
        where={
        'OR': [
            {'email': {'contains': 'harshana555prajapati@gmail.com'}}
        ]
    }
    )

    ghdata = await db.ghdata.find_first(
        where={
        'OR': [
            {'email': {'contains': 'harshana555prajapati@gmail.com'}}
        ]
    }
    )
    
    onboard = await db.useronboard.find_first(
        where={
        'OR': [
            {'email': {'contains': 'harshana555prajapati@gmail.com'}}
        ]
    }
    )
    
    print(f'{knowledge_base} ::: {ghdata}:::{onboard}')
    
    await db.disconnect()

def initials():
  chat = ChatOpenAI(
      temperature=0.9,
      openai_api_key='',
      model='gpt-4'
      )

  template_string = '''
     You're to create twitter post for the user.The post that you craft should have checked following parameters: 
     -Keep it structured and clean
     -Give a human touch to the post you'll generate.It shouldn't be recognisable that the post has been generated by an AI.
     -Create post that aligns with the given user context and his/her skills.
     -The post should STRICTLY be limited  to 280 characters only.
     -Personalize user post and add emojis if it aligns with the content and its tone.Don't add it everywhere!
     The user's technical background and interests have to be picked up from this,{onboard}.The knowledge-base 
     consists of their liked posts and their techinal experience,{knowledge_base}.The languages they have coded in are
     {ghdata}.
  '''

  prompt_template = ChatPromptTemplate.from_template(template_string)
  message = prompt_template.format_messages(onboard= onboard, knowledge_base= knowledge_base, ghdata= ghdata)
  reply = chat(message)
  return reply.content

@app.get("/")
def read_root():
    asyncio.run(main())
    return initials()
    

